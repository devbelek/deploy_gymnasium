services:

  web:
    build: ./backend
    volumes:
      - ./backend:/app
      - ./.env:/app/.env
      - static_volume:/app/staticfiles
      - media_volume:/app/media
    env_file:
      - ./.env
    depends_on:
      - db
      - redis
      - migration
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      - REDIS_URL=redis://redis:6379/0
    ports:
      - "9000:9000"
    networks:
      - dev

  db:
    image: postgres:13-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data
    env_file:
      - ./.env
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PORT=${POSTGRES_PORT}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - dev

  redis:
    image: redis:alpine
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - dev

  celery_worker:
    build: ./backend
    command: celery -A Gimnasium worker --loglevel=info --pool=solo
    volumes:
      - ./backend:/app
      - static_volume:/app/staticfiles
      - media_volume:/app/media
    env_file:
      - ./.env
    depends_on:
      - web
      - db
      - redis
    networks:
      - dev

  celery_beat:
    build: ./backend
    command: celery -A Gimnasium beat -l info --scheduler django_celery_beat.schedulers:DatabaseScheduler
    volumes:
      - ./backend:/app
      - static_volume:/app/staticfiles
      - media_volume:/app/media
    env_file:
      - ./.env
    depends_on:
      - web
      - db
      - redis
      - celery_worker
    networks:
      - dev

  nginx:
    image: nginx:alpine
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - static_volume:/app/staticfiles
      - media_volume:/app/media
      - /etc/letsencrypt:/etc/letsencrypt:ro
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - web
      - frontend
    networks:
      - dev

  migration:
    build: ./backend
    command: sh -c "python manage.py makemigrations && python manage.py migrate"
    depends_on:
      - db
    networks:
      - dev

frontend:
  build:
    context: ./frontend
    dockerfile: Dockerfile
  container_name: frontend
  volumes:
    - ./frontend:/app
    - /app/node_modules
  environment:
    - NEXT_PUBLIC_API=https://3-gymnasium.kg
    - NEXT_PUBLIC_ENDPOINT=api
  ports:
    - "3000:80"
  depends_on:
    - web
  networks:
    - dev

volumes:
  postgres_data:
  redis_data:
  static_volume:
  media_volume:

networks:
  dev: